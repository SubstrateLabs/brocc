"""
Utilities for handling geospatial location data with DuckDB.
Provides helper functions for converting between Python tuples and DuckDB GEOMETRY types.
"""

from typing import Any, Optional, Tuple


def location_tuple_to_wkt(location: Optional[Tuple[float, float]]) -> Optional[str]:
    """
    Convert a location tuple (lon, lat) to WKT format for DuckDB storage.

    Args:
        location: A tuple of (longitude, latitude) coordinates or None

    Returns:
        WKT string representation ('POINT (lon lat)') or None if input is None
    """
    if location is None:
        return None

    # Ensure it's a tuple with exactly 2 elements
    if not isinstance(location, tuple) or len(location) != 2:
        return None

    lon, lat = location

    # Ensure both values are numeric (int or float)
    if not (isinstance(lon, (int, float)) and isinstance(lat, (int, float))):
        return None

    # Format as a string that DuckDB's ST_Point function can parse
    # Using WKT (Well-Known Text) format 'POINT (lon lat)'
    return f"POINT ({lon} {lat})"


def modify_schema_for_geometry(sql: str) -> str:
    """
    Modify generated SQL to replace the default location VARCHAR type with GEOMETRY.

    Args:
        sql: The SQL CREATE TABLE statement generated by pydantic_to_sql

    Returns:
        Modified SQL with location field changed to GEOMETRY type
    """
    lines = sql.split("\n")
    modified_lines = []
    replaced_location = False

    for line in lines:
        stripped_line = line.strip()
        if stripped_line.startswith("location "):
            modified_lines.append("  location GEOMETRY,")  # Replace with GEOMETRY
            replaced_location = True
        else:
            modified_lines.append(line)

    if not replaced_location:
        print(
            "Warning: Could not find 'location' column definition in generated SQL to replace with GEOMETRY."
        )

    return "\n".join(modified_lines)


def add_location_fields_to_query(base_query: str) -> str:
    """
    Add ST_X and ST_Y extraction to a SELECT query to retrieve location coordinates.

    Args:
        base_query: Original SQL query selecting rows with location GEOMETRY field

    Returns:
        Modified query that extracts longitude and latitude as separate columns
    """
    # Wrap the original query and add location extraction
    return (
        f"SELECT *, ST_X(location) as longitude, ST_Y(location) as latitude FROM ({base_query}) sub"
    )


def reconstruct_location_tuple(doc: dict[str, Any]) -> dict[str, Any]:
    """
    Process a document dict to reconstruct the location tuple from longitude/latitude fields.

    Args:
        doc: Document dictionary with longitude and latitude fields from query

    Returns:
        Document with location tuple and longitude/latitude fields removed
    """
    result = doc.copy()
    lon = result.pop("longitude", None)
    lat = result.pop("latitude", None)

    if lon is not None and lat is not None:
        result["location"] = (lon, lat)
    elif "location" not in result:
        result["location"] = None

    return result
